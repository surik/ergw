%-*-Erlang-*-
[{setup, [{data_dir, "/var/lib/ergw"},
	  {log_dir,  "/var/log/gtp-c-node"}				%% NOTE: lager is not using this
	 ]},

 {ergw, [%% {dp_handler, ngc_dp},
	 {http_api,
	  [{port, 8080},
	   {ip, {0,0,0,0}}
	  ]},
	 {sockets,
	  [{irx, [{type, 'gtp-c'},
		  {ip,  {172,20,16,90}},
		  {netns, "/var/run/netns/grx"}]},
	   {grx, [{type, 'gtp-u'},
		  {node, 'gtp-u-proxy@vlx161-tpmd'},
		  {name, 'grx'}]},
	   {'proxy-irx', [{type, 'gtp-c'},
			  {ip,  {172,20,16,91}},
			  %% {ip, {16#2001, 16#6f8, 16#12d9, 16#16, 16#10, 0, 0, 16#5b}},
			  {netns, "/var/run/netns/proxy"}]},
	   {'proxy-grx', [{type, 'gtp-u'},
			  {node, 'gtp-u-proxy@vlx161-tpmd'},
			  {name, 'proxy-grx'}]}
	  ]},

	 {handlers,
	  [{'h1', [{handler, pgw_s5s8_proxy},
		   {protocol, gn},
		   {sockets, [irx]},
		   {data_paths, [grx]},
		   {proxy_sockets, ['proxy-irx']},
		   {proxy_data_paths, ['proxy-grx']},
		   {pgw, {172, 20, 16, 89}}
		   %% {pgw, {16#2001, 16#6f8, 16#12d9, 16#16, 16#10, 0, 0, 16#59}}
		  ]},
	   {'h2', [{handler, pgw_s5s8_proxy},
		   {protocol, s5s8},
		   {sockets, [irx]},
		   {data_paths, [grx]},
		   {proxy_sockets, ['proxy-irx']},
		   {proxy_data_paths, ['proxy-grx']},
		   {pgw, {172, 20, 16, 89}}
		   %% {pgw, {16#2001, 16#6f8, 16#12d9, 16#16, 16#10, 0, 0, 16#59}}
		  ]}
	  ]}

	]},

 {exometer_core, [{reporters, [{exometer_report_netdata, []}]}]},

 {ergw_aaa, [
	     %% {ergw_aaa_provider, {ergw_aaa_mock, [{shared_secret, <<"MySecret">>}]}}
	     %% {ergw_aaa_provider,
	     %%  {ergw_aaa_radius,
	     %%   [{nas_identifier,<<"ac1.ac.tplab">>},
	     %%		{radius_auth_server,{{172,20,16,75},1812,<<"secret">>}},
	     %%		{radius_acct_server,{{172,20,16,75},1813,<<"secret">>}}
	     %%   ]}
	     %% }
	     {ergw_aaa_provider,
	      {ergw_aaa_diameter,
	       [{nas_identifier, <<"nas01.dia.tpip.net">>},
		{host,           <<"nas01.dia.tpip.net">>},
		{realm,          <<"dia.tpip.net">>},
		{connect_to,     <<"aaa://172.20.16.75:3868;transport=sctp">>}
	       ]}}
	    ]},

 {hackney, [
	    {mod_metrics, exometer}
	    ]},

 {jobs, [{samplers,
	  [{cpu_feedback, jobs_sampler_cpu, []}
	  ]},
	 {queues,
	  [{path_restart,
	    [{regulators, [{counter, [{limit, 100}]}]},
	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
	    ]},
	   {create,
	    [{max_time, 5000}, %% max 5 seconds
	     {regulators, [{rate, [{limit, 100}]}]},
	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
	    ]},
	   {delete,
	    [{regulators, [{counter, [{limit, 100}]}]},
	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
	    ]},
	   {other,
	    [{max_time, 10000}, %% max 10 seconds
	     {regulators, [{rate, [{limit, 1000}]}]},
	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
	    ]}
	  ]}
	]},

 {lager, [
	  {log_root, "/var/log/gtp-c-node"},
	  {colored, true},
	  {error_logger_redirect, true},
	  {crash_log, "crash.log"},
	  {handlers, [
		      {lager_console_backend, [{level, debug}]},
		      {lager_file_backend, [{file, "error.log"}, {level, error}]},
		      {lager_file_backend, [{file, "console.log"}, {level, debug}]}
		     ]}
	 ]}
].
